{
  "version": "3.4",
  "log": [
    {
      "@aave/core-v3/contracts/dependencies/openzeppelin/contracts/IERC20.sol:IERC20": {
        "src": "@aave/core-v3/contracts/dependencies/openzeppelin/contracts/IERC20.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.23"
      },
      "@aave/core-v3/contracts/interfaces/IAToken.sol:IAToken": {
        "src": "@aave/core-v3/contracts/interfaces/IAToken.sol:13",
        "inherit": [
          "@aave/core-v3/contracts/interfaces/IInitializableAToken.sol:IInitializableAToken",
          "@aave/core-v3/contracts/interfaces/IScaledBalanceToken.sol:IScaledBalanceToken",
          "@aave/core-v3/contracts/dependencies/openzeppelin/contracts/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "mint(address,address,uint256,uint256)",
          "burn(address,address,uint256,uint256)",
          "mintToTreasury(uint256,uint256)",
          "transferOnLiquidation(address,address,uint256)",
          "transferUnderlyingTo(address,uint256)",
          "handleRepayment(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "UNDERLYING_ASSET_ADDRESS()",
          "RESERVE_TREASURY_ADDRESS()",
          "DOMAIN_SEPARATOR()",
          "nonces(address)",
          "rescueTokens(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.23"
      },
      "@aave/core-v3/contracts/interfaces/IAaveIncentivesController.sol:IAaveIncentivesController": {
        "src": "@aave/core-v3/contracts/interfaces/IAaveIncentivesController.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "handleAction(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.23"
      },
      "@aave/core-v3/contracts/interfaces/IInitializableAToken.sol:IInitializableAToken": {
        "src": "@aave/core-v3/contracts/interfaces/IInitializableAToken.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(address,address,address,address,uint8,string,string,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.23"
      },
      "@aave/core-v3/contracts/interfaces/IPool.sol:IPool": {
        "src": "@aave/core-v3/contracts/interfaces/IPool.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintUnbacked(address,uint256,address,uint16)",
          "backUnbacked(address,uint256,uint256)",
          "supply(address,uint256,address,uint16)",
          "supplyWithPermit(address,uint256,address,uint16,uint256,uint8,bytes32,bytes32)",
          "withdraw(address,uint256,address)",
          "borrow(address,uint256,uint256,uint16,address)",
          "repay(address,uint256,uint256,address)",
          "repayWithPermit(address,uint256,uint256,address,uint256,uint8,bytes32,bytes32)",
          "repayWithATokens(address,uint256,uint256)",
          "swapBorrowRateMode(address,uint256)",
          "rebalanceStableBorrowRate(address,address)",
          "setUserUseReserveAsCollateral(address,bool)",
          "liquidationCall(address,address,address,uint256,bool)",
          "flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)",
          "flashLoanSimple(address,address,uint256,bytes,uint16)",
          "getUserAccountData(address)",
          "initReserve(address,address,address,address,address)",
          "dropReserve(address)",
          "setReserveInterestRateStrategyAddress(address,address)",
          "setConfiguration(address,(uint256))",
          "getConfiguration(address)",
          "getUserConfiguration(address)",
          "getReserveNormalizedIncome(address)",
          "getReserveNormalizedVariableDebt(address)",
          "getReserveData(address)",
          "finalizeTransfer(address,address,address,uint256,uint256,uint256)",
          "getReservesList()",
          "getReserveAddressById(uint16)",
          "ADDRESSES_PROVIDER()",
          "updateBridgeProtocolFee(uint256)",
          "updateFlashloanPremiums(uint128,uint128)",
          "configureEModeCategory(uint8,(uint16,uint16,uint16,address,string))",
          "getEModeCategoryData(uint8)",
          "setUserEMode(uint8)",
          "getUserEMode(address)",
          "resetIsolationModeTotalDebt(address)",
          "MAX_STABLE_RATE_BORROW_SIZE_PERCENT()",
          "FLASHLOAN_PREMIUM_TOTAL()",
          "BRIDGE_PROTOCOL_FEE()",
          "FLASHLOAN_PREMIUM_TO_PROTOCOL()",
          "MAX_NUMBER_RESERVES()",
          "mintToTreasury(address[])",
          "rescueTokens(address,address,uint256)",
          "deposit(address,uint256,address,uint16)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.23"
      },
      "@aave/core-v3/contracts/interfaces/IPoolAddressesProvider.sol:IPoolAddressesProvider": {
        "src": "@aave/core-v3/contracts/interfaces/IPoolAddressesProvider.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getMarketId()",
          "setMarketId(string)",
          "getAddress(bytes32)",
          "setAddressAsProxy(bytes32,address)",
          "setAddress(bytes32,address)",
          "getPool()",
          "setPoolImpl(address)",
          "getPoolConfigurator()",
          "setPoolConfiguratorImpl(address)",
          "getPriceOracle()",
          "setPriceOracle(address)",
          "getACLManager()",
          "setACLManager(address)",
          "getACLAdmin()",
          "setACLAdmin(address)",
          "getPriceOracleSentinel()",
          "setPriceOracleSentinel(address)",
          "getPoolDataProvider()",
          "setPoolDataProvider(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.23"
      },
      "@aave/core-v3/contracts/interfaces/IPoolAddressesProviderRegistry.sol:IPoolAddressesProviderRegistry": {
        "src": "@aave/core-v3/contracts/interfaces/IPoolAddressesProviderRegistry.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAddressesProvidersList()",
          "getAddressesProviderIdByAddress(address)",
          "getAddressesProviderAddressById(uint256)",
          "registerAddressesProvider(address,uint256)",
          "unregisterAddressesProvider(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.23"
      },
      "@aave/core-v3/contracts/interfaces/IScaledBalanceToken.sol:IScaledBalanceToken": {
        "src": "@aave/core-v3/contracts/interfaces/IScaledBalanceToken.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "scaledBalanceOf(address)",
          "getScaledUserBalanceAndSupply(address)",
          "scaledTotalSupply()",
          "getPreviousIndex(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.23"
      },
      "@aave/core-v3/contracts/protocol/libraries/types/DataTypes.sol:DataTypes": {
        "src": "@aave/core-v3/contracts/protocol/libraries/types/DataTypes.sol:4",
        "version": {
          "withMetadata": "6479644be02fdcfd346aa6125bc3c96bdb2ea93f1cdb0c86a1b8de7425816b1e",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.23"
      },
      "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:50",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)810_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(AccessControlStorage)819_storage": {
              "label": "struct AccessControlUpgradeable.AccessControlStorage",
              "members": [
                {
                  "label": "_roles",
                  "type": "t_mapping(t_bytes32,t_struct(RoleData)810_storage)",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(InitializableStorage)878_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)810_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.AccessControl": [
              {
                "contract": "AccessControlUpgradeable",
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)810_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.23"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)878_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.23"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)958_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(InitializableStorage)878_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:38",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:45",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.23"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)878_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.23"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)878_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.23"
      },
      "@openzeppelin/contracts/access/AccessControl.sol:AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:49",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)2942_storage)",
              "contract": "AccessControl",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:55"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)2942_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)2942_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.23"
      },
      "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.23"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.23"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.23"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.23"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:50"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.23"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.23"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.23"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:42",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.23"
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "9e2740f053b59ea2b67f313daf6dd2e6b1840a111146483ef1f6a3ee5eebc89b",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.23"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "b3ee341baa6143fde37176fb4fbda71d45831ffe6696c2755051107b2758e3d9",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:105"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.23"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.23"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.23"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.23"
      },
      "contracts/evm/launch_vault/deployer/aave_deployer.sol:BlackwingAaveDeployer": {
        "src": "contracts/evm/launch_vault/deployer/aave_deployer.sol:20",
        "version": {
          "withMetadata": "aad8467ce00e9ad0ecbc0ad5a84af6f65ef7b51447b11b81211c860c4246d310",
          "withoutMetadata": "f3a42626a1e03db2b4aca0836421a253043f199dca9d5665636e70b4dbade247",
          "linkedWithoutMetadata": "f3a42626a1e03db2b4aca0836421a253043f199dca9d5665636e70b4dbade247"
        },
        "inherit": [
          "contracts/evm/launch_vault/deployer/deployer_interface.sol:IDeployer",
          "@openzeppelin/contracts/access/AccessControl.sol:AccessControl",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "registerVault(address)",
          "whitelistAsset(address,address)",
          "deploy(address,uint256)",
          "remove(address,uint256)",
          "poolToken(address)",
          "totalDeployedAmount(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BlackwingAaveDeployer",
            "src": "contracts/evm/launch_vault/deployer/aave_deployer.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)2942_storage)",
              "contract": "AccessControl",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:55"
            },
            {
              "label": "aaveRegistry",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(IPoolAddressesProviderRegistry)1186",
              "contract": "BlackwingAaveDeployer",
              "src": "contracts/evm/launch_vault/deployer/aave_deployer.sol:30"
            },
            {
              "label": "pools",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_contract(IERC20)4029,t_struct(PoolInfo)4725_storage)",
              "contract": "BlackwingAaveDeployer",
              "src": "contracts/evm/launch_vault/deployer/aave_deployer.sol:31"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IAToken)220": {
              "label": "contract IAToken",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)4029": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(IPoolAddressesProvider)1131": {
              "label": "contract IPoolAddressesProvider",
              "numberOfBytes": "20"
            },
            "t_contract(IPoolAddressesProviderRegistry)1186": {
              "label": "contract IPoolAddressesProviderRegistry",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)2942_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_contract(IERC20)4029,t_struct(PoolInfo)4725_storage)": {
              "label": "mapping(contract IERC20 => struct PoolInfo)",
              "numberOfBytes": "32"
            },
            "t_struct(PoolInfo)4725_storage": {
              "label": "struct PoolInfo",
              "members": [
                {
                  "label": "aToken",
                  "type": "t_contract(IAToken)220",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pap",
                  "type": "t_contract(IPoolAddressesProvider)1131",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "isValue",
                  "type": "t_bool",
                  "offset": 20,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(RoleData)2942_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.23"
      },
      "contracts/evm/launch_vault/deployer/deployer_interface.sol:IDeployer": {
        "src": "contracts/evm/launch_vault/deployer/deployer_interface.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deploy(address,uint256)",
          "remove(address,uint256)",
          "totalDeployedAmount(address)",
          "poolToken(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.23"
      },
      "contracts/evm/launch_vault/vault.sol:BlackwingVault": {
        "src": "contracts/evm/launch_vault/vault.sol:29",
        "version": {
          "withMetadata": "3fae8938a09a71da7d06efb458847acd86563ee07a5e006dcf96d94290ff48a7",
          "withoutMetadata": "0cdebaf6c0e08fd13028c0fc48d14386eab8d637c9b664e79f9edc1933962bfe",
          "linkedWithoutMetadata": "0cdebaf6c0e08fd13028c0fc48d14386eab8d637c9b664e79f9edc1933962bfe"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "()",
          "initialize(uint256)",
          "registerAsset(address,address,address)",
          "updateDeployer(address,address)",
          "enableWithdrawals()",
          "disableWithdrawals()",
          "setMinBlocksSinceLastDeposit(uint256)",
          "deposit(address,uint256)",
          "withdraw(address,uint256)",
          "vaultTokenAddress(address)",
          "balance(address,address)",
          "deployAssets(address,uint256)",
          "removeAssets(address,uint256)",
          "enableLPTransfers(address)",
          "disableLPTransfers(address)",
          "lastDepositBlock(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "pools",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_contract(IERC20)4029,t_struct(PoolInfo)5124_storage)",
              "contract": "BlackwingVault",
              "src": "contracts/evm/launch_vault/vault.sol:46"
            },
            {
              "label": "users",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_struct(UserInfo)5129_storage)",
              "contract": "BlackwingVault",
              "src": "contracts/evm/launch_vault/vault.sol:47"
            },
            {
              "label": "withdrawsEnabled",
              "offset": 0,
              "slot": "2",
              "type": "t_bool",
              "contract": "BlackwingVault",
              "src": "contracts/evm/launch_vault/vault.sol:48"
            },
            {
              "label": "minBlocksSinceLastDeposit",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "BlackwingVault",
              "src": "contracts/evm/launch_vault/vault.sol:49"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)810_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(AccessControlStorage)819_storage": {
              "label": "struct AccessControlUpgradeable.AccessControlStorage",
              "members": [
                {
                  "label": "_roles",
                  "type": "t_mapping(t_bytes32,t_struct(RoleData)810_storage)",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(InitializableStorage)878_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)810_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_contract(BlackwingVaultToken)6166": {
              "label": "contract BlackwingVaultToken",
              "numberOfBytes": "20"
            },
            "t_contract(IDeployer)5101": {
              "label": "contract IDeployer",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)4029": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_struct(UserInfo)5129_storage)": {
              "label": "mapping(address => struct UserInfo)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_contract(IERC20)4029,t_struct(PoolInfo)5124_storage)": {
              "label": "mapping(contract IERC20 => struct PoolInfo)",
              "numberOfBytes": "32"
            },
            "t_struct(PoolInfo)5124_storage": {
              "label": "struct PoolInfo",
              "members": [
                {
                  "label": "isValue",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "vaultToken",
                  "type": "t_contract(BlackwingVaultToken)6166",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "deployer",
                  "type": "t_contract(IDeployer)5101",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(UserInfo)5129_storage": {
              "label": "struct UserInfo",
              "members": [
                {
                  "label": "isValue",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "lastDepositBlock",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.AccessControl": [
              {
                "contract": "AccessControlUpgradeable",
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)810_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.23"
      },
      "contracts/evm/launch_vault/vault_token.sol:BlackwingVaultToken": {
        "src": "contracts/evm/launch_vault/vault_token.sol:11",
        "version": {
          "withMetadata": "103fdeac4d12605872a287ac3d359d7a1db340af3d7a39fe65ba2b81d8699063",
          "withoutMetadata": "c5c43a1fea5fcb11cc2137a7125ab3fb659b9041f9a2b09284c756562427a0b1",
          "linkedWithoutMetadata": "c5c43a1fea5fcb11cc2137a7125ab3fb659b9041f9a2b09284c756562427a0b1"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize(address,string,string)",
          "getVaultAddress()",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "enableTransfers()",
          "disableTransfers()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "vault",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "BlackwingVaultToken",
              "src": "contracts/evm/launch_vault/vault_token.sol:17"
            },
            {
              "label": "transferable",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "BlackwingVaultToken",
              "src": "contracts/evm/launch_vault/vault_token.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)810_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(AccessControlStorage)819_storage": {
              "label": "struct AccessControlUpgradeable.AccessControlStorage",
              "members": [
                {
                  "label": "_roles",
                  "type": "t_mapping(t_bytes32,t_struct(RoleData)810_storage)",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ERC20Storage)958_storage": {
              "label": "struct ERC20Upgradeable.ERC20Storage",
              "members": [
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_allowances",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_totalSupply",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(InitializableStorage)878_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)810_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.AccessControl": [
              {
                "contract": "AccessControlUpgradeable",
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)810_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:38",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:45",
                "offset": 0,
                "slot": "4"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.23"
      },
      "contracts/evm/tests/mock_aave.sol:MockAaveAddressProvider": {
        "src": "contracts/evm/tests/mock_aave.sol:37",
        "version": {
          "withMetadata": "b590733341c8a91fa1f629880d29228ff80d3db3f36ddafe3103b1fb542d3591",
          "withoutMetadata": "e1af5cf91068cc196b837af3dbced9c6ba9c42b86b6f9cc79e9c9e9a1ce9cb25",
          "linkedWithoutMetadata": "e1af5cf91068cc196b837af3dbced9c6ba9c42b86b6f9cc79e9c9e9a1ce9cb25"
        },
        "inherit": [
          "@aave/core-v3/contracts/interfaces/IPoolAddressesProvider.sol:IPoolAddressesProvider"
        ],
        "libraries": [],
        "methods": [
          "getMarketId()",
          "setMarketId(string)",
          "getAddress(bytes32)",
          "setAddressAsProxy(bytes32,address)",
          "setAddress(bytes32,address)",
          "getPool()",
          "setPoolImpl(address)",
          "getPoolConfigurator()",
          "setPoolConfiguratorImpl(address)",
          "getPriceOracle()",
          "setPriceOracle(address)",
          "getACLManager()",
          "setACLManager(address)",
          "getACLAdmin()",
          "setACLAdmin(address)",
          "getPriceOracleSentinel()",
          "setPriceOracleSentinel(address)",
          "getPoolDataProvider()",
          "setPoolDataProvider(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "marketId",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "MockAaveAddressProvider",
              "src": "contracts/evm/tests/mock_aave.sol:38"
            },
            {
              "label": "pool",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "MockAaveAddressProvider",
              "src": "contracts/evm/tests/mock_aave.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.23"
      },
      "contracts/evm/tests/mock_aave.sol:MockAavePool": {
        "src": "contracts/evm/tests/mock_aave.sol:118",
        "version": {
          "withMetadata": "9662db567ed2f3783f1d101f0655806ea280b77f89df8bae1178466ccc85e018",
          "withoutMetadata": "2acdb45532d6e6550b4fc0efb1982a9f27fb1b5049af23e671905fe153c2bc72",
          "linkedWithoutMetadata": "2acdb45532d6e6550b4fc0efb1982a9f27fb1b5049af23e671905fe153c2bc72"
        },
        "inherit": [
          "@aave/core-v3/contracts/interfaces/IPool.sol:IPool"
        ],
        "libraries": [
          "@aave/core-v3/contracts/protocol/libraries/types/DataTypes.sol:DataTypes"
        ],
        "methods": [
          "(address,address)",
          "supply(address,uint256,address,uint16)",
          "withdraw(address,uint256,address)",
          "getReserveData(address)",
          "mintUnbacked(address,uint256,address,uint16)",
          "backUnbacked(address,uint256,uint256)",
          "borrow(address,uint256,uint256,uint16,address)",
          "supplyWithPermit(address,uint256,address,uint16,uint256,uint8,bytes32,bytes32)",
          "repay(address,uint256,uint256,address)",
          "repayWithPermit(address,uint256,uint256,address,uint256,uint8,bytes32,bytes32)",
          "repayWithATokens(address,uint256,uint256)",
          "swapBorrowRateMode(address,uint256)",
          "rebalanceStableBorrowRate(address,address)",
          "setUserUseReserveAsCollateral(address,bool)",
          "liquidationCall(address,address,address,uint256,bool)",
          "flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)",
          "flashLoanSimple(address,address,uint256,bytes,uint16)",
          "getUserAccountData(address)",
          "initReserve(address,address,address,address,address)",
          "dropReserve(address)",
          "setReserveInterestRateStrategyAddress(address,address)",
          "setConfiguration(address,(uint256))",
          "getConfiguration(address)",
          "getUserConfiguration(address)",
          "getReserveNormalizedIncome(address)",
          "getReserveNormalizedVariableDebt(address)",
          "finalizeTransfer(address,address,address,uint256,uint256,uint256)",
          "getReservesList()",
          "getReserveAddressById(uint16)",
          "ADDRESSES_PROVIDER()",
          "updateBridgeProtocolFee(uint256)",
          "updateFlashloanPremiums(uint128,uint128)",
          "configureEModeCategory(uint8,(uint16,uint16,uint16,address,string))",
          "getEModeCategoryData(uint8)",
          "setUserEMode(uint8)",
          "getUserEMode(address)",
          "resetIsolationModeTotalDebt(address)",
          "MAX_STABLE_RATE_BORROW_SIZE_PERCENT()",
          "FLASHLOAN_PREMIUM_TOTAL()",
          "BRIDGE_PROTOCOL_FEE()",
          "FLASHLOAN_PREMIUM_TO_PROTOCOL()",
          "MAX_NUMBER_RESERVES()",
          "mintToTreasury(address[])",
          "rescueTokens(address,address,uint256)",
          "deposit(address,uint256,address,uint16)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockAavePool",
            "src": "contracts/evm/tests/mock_aave.sol:122"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "mockAToken",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(MockAToken)7361",
              "contract": "MockAavePool",
              "src": "contracts/evm/tests/mock_aave.sol:119"
            },
            {
              "label": "registeredToken",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(IERC20)4029",
              "contract": "MockAavePool",
              "src": "contracts/evm/tests/mock_aave.sol:120"
            }
          ],
          "types": {
            "t_contract(IERC20)4029": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(MockAToken)7361": {
              "label": "contract MockAToken",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.23"
      },
      "contracts/evm/tests/mock_aave.sol:MockAaveRegistry": {
        "src": "contracts/evm/tests/mock_aave.sol:11",
        "version": {
          "withMetadata": "93eb4d2712095c00f390179b3fed5f67aab6db520f7f7ddb537eea8a9ad626eb",
          "withoutMetadata": "a04784add6100ed31302e599124e302c8814dafccc3ea3d428d4378646d5d152",
          "linkedWithoutMetadata": "a04784add6100ed31302e599124e302c8814dafccc3ea3d428d4378646d5d152"
        },
        "inherit": [
          "@aave/core-v3/contracts/interfaces/IPoolAddressesProviderRegistry.sol:IPoolAddressesProviderRegistry"
        ],
        "libraries": [],
        "methods": [
          "getAddressesProvidersList()",
          "getAddressesProviderIdByAddress(address)",
          "getAddressesProviderAddressById(uint256)",
          "registerAddressesProvider(address,uint256)",
          "unregisterAddressesProvider(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "ids",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "MockAaveRegistry",
              "src": "contracts/evm/tests/mock_aave.sol:12"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.23"
      },
      "contracts/evm/tests/mock_atoken.sol:MockAToken": {
        "src": "contracts/evm/tests/mock_atoken.sol:6",
        "version": {
          "withMetadata": "8164ddab3d2ee509ca64964efd8dc9692feb335cf2db4686fabbc05ba4349a6a",
          "withoutMetadata": "a18a51e981b3ad16a2e3c778b72e4155a1f8ec3967f6cd5bd8aa64d9e56c1b0f",
          "linkedWithoutMetadata": "a18a51e981b3ad16a2e3c778b72e4155a1f8ec3967f6cd5bd8aa64d9e56c1b0f"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "UNDERLYING_ASSET_ADDRESS()",
          "mint(address,address,uint256,uint256)",
          "burn(address,address,uint256,uint256)",
          "mintToTreasury(uint256,uint256)",
          "transferOnLiquidation(address,address,uint256)",
          "transferUnderlyingTo(address,uint256)",
          "handleRepayment(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "RESERVE_TREASURY_ADDRESS()",
          "DOMAIN_SEPARATOR()",
          "nonces(address)",
          "rescueTokens(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockAToken",
            "src": "contracts/evm/tests/mock_atoken.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "underlying",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(IERC20)4029",
              "contract": "MockAToken",
              "src": "contracts/evm/tests/mock_atoken.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)4029": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.23"
      },
      "contracts/evm/tests/mock_coin.sol:MockCoin": {
        "src": "contracts/evm/tests/mock_coin.sol:6",
        "version": {
          "withMetadata": "4cf72c86f44e0e1dd8de0fb887d6dfde18483698fc2df5983f783756fc2ae36d",
          "withoutMetadata": "23d17daa6115d08dc9d700668961adc367f4ff3331ea2e2bd3b858a295b32d14",
          "linkedWithoutMetadata": "23d17daa6115d08dc9d700668961adc367f4ff3331ea2e2bd3b858a295b32d14"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint8)",
          "decimals()",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockCoin",
            "src": "contracts/evm/tests/mock_coin.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "MockCoin",
              "src": "contracts/evm/tests/mock_coin.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.23"
      },
      "contracts/evm/tests/mock_contract.sol:MockContract": {
        "src": "contracts/evm/tests/mock_contract.sol:6",
        "version": {
          "withMetadata": "b40f14cfb2d582367cd3d016eeb068bc7ea561cbf64d75978762874472319819",
          "withoutMetadata": "b1cd0a920be426e9d920bc35d6f922baa7fa9261bd441ab590119bcab5de3d4b",
          "linkedWithoutMetadata": "b1cd0a920be426e9d920bc35d6f922baa7fa9261bd441ab590119bcab5de3d4b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "fail()",
          "success()",
          "adj(address,int256,address,int256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.23"
      },
      "contracts/evm/tests/mock_deployer.sol:MockDeployer": {
        "src": "contracts/evm/tests/mock_deployer.sol:14",
        "version": {
          "withMetadata": "b55fa4eb9686dc8f45515543df88746ce7d1ccb0989b9a5ec7cfb7480639e0f3",
          "withoutMetadata": "e139fb0e9e4e0a5c566a586dd5db9b2103d4ac0781840a1eb0f4843df6057efc",
          "linkedWithoutMetadata": "e139fb0e9e4e0a5c566a586dd5db9b2103d4ac0781840a1eb0f4843df6057efc"
        },
        "inherit": [
          "contracts/evm/launch_vault/deployer/deployer_interface.sol:IDeployer"
        ],
        "libraries": [],
        "methods": [
          "registerPool(address,address)",
          "deploy(address,uint256)",
          "remove(address,uint256)",
          "totalDeployedAmount(address)",
          "poolToken(address)",
          "mockPositiveYield(address,address,uint256)",
          "mockNegativeYield(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "pools",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_contract(IERC20)4029,t_struct(PoolInfo)7533_storage)",
              "contract": "MockDeployer",
              "src": "contracts/evm/tests/mock_deployer.sol:15"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IERC20)4029": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(MockCoin)7422": {
              "label": "contract MockCoin",
              "numberOfBytes": "20"
            },
            "t_mapping(t_contract(IERC20)4029,t_struct(PoolInfo)7533_storage)": {
              "label": "mapping(contract IERC20 => struct PoolInfo)",
              "numberOfBytes": "32"
            },
            "t_struct(PoolInfo)7533_storage": {
              "label": "struct PoolInfo",
              "members": [
                {
                  "label": "isValue",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "vaultCoin",
                  "type": "t_contract(MockCoin)7422",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "asset",
                  "type": "t_contract(MockCoin)7422",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.23"
      }
    }
  ]
}