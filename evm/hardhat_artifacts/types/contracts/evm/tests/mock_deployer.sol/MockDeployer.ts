/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export interface MockDeployerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "deploy"
      | "mockNegativeYield"
      | "mockPositiveYield"
      | "poolToken"
      | "registerPool"
      | "remove"
      | "totalDeployedAmount"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Deployed" | "Removed"): EventFragment;

  encodeFunctionData(
    functionFragment: "deploy",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mockNegativeYield",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mockPositiveYield",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "poolToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerPool",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "remove",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalDeployedAmount",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "deploy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mockNegativeYield",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mockPositiveYield",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "remove", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalDeployedAmount",
    data: BytesLike
  ): Result;
}

export namespace DeployedEvent {
  export type InputTuple = [asset: AddressLike, amount: BigNumberish];
  export type OutputTuple = [asset: string, amount: bigint];
  export interface OutputObject {
    asset: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemovedEvent {
  export type InputTuple = [asset: AddressLike, amount: BigNumberish];
  export type OutputTuple = [asset: string, amount: bigint];
  export interface OutputObject {
    asset: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MockDeployer extends BaseContract {
  connect(runner?: ContractRunner | null): MockDeployer;
  waitForDeployment(): Promise<this>;

  interface: MockDeployerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  deploy: TypedContractMethod<
    [asset: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  mockNegativeYield: TypedContractMethod<
    [asset: AddressLike, vault: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  mockPositiveYield: TypedContractMethod<
    [asset: AddressLike, vault: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  poolToken: TypedContractMethod<[asset: AddressLike], [string], "view">;

  registerPool: TypedContractMethod<
    [asset: AddressLike, vaultCoin: AddressLike],
    [void],
    "nonpayable"
  >;

  remove: TypedContractMethod<
    [asset: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  totalDeployedAmount: TypedContractMethod<
    [asset: AddressLike],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "deploy"
  ): TypedContractMethod<
    [asset: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mockNegativeYield"
  ): TypedContractMethod<
    [asset: AddressLike, vault: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mockPositiveYield"
  ): TypedContractMethod<
    [asset: AddressLike, vault: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "poolToken"
  ): TypedContractMethod<[asset: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "registerPool"
  ): TypedContractMethod<
    [asset: AddressLike, vaultCoin: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "remove"
  ): TypedContractMethod<
    [asset: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "totalDeployedAmount"
  ): TypedContractMethod<[asset: AddressLike], [bigint], "view">;

  getEvent(
    key: "Deployed"
  ): TypedContractEvent<
    DeployedEvent.InputTuple,
    DeployedEvent.OutputTuple,
    DeployedEvent.OutputObject
  >;
  getEvent(
    key: "Removed"
  ): TypedContractEvent<
    RemovedEvent.InputTuple,
    RemovedEvent.OutputTuple,
    RemovedEvent.OutputObject
  >;

  filters: {
    "Deployed(address,uint256)": TypedContractEvent<
      DeployedEvent.InputTuple,
      DeployedEvent.OutputTuple,
      DeployedEvent.OutputObject
    >;
    Deployed: TypedContractEvent<
      DeployedEvent.InputTuple,
      DeployedEvent.OutputTuple,
      DeployedEvent.OutputObject
    >;

    "Removed(address,uint256)": TypedContractEvent<
      RemovedEvent.InputTuple,
      RemovedEvent.OutputTuple,
      RemovedEvent.OutputObject
    >;
    Removed: TypedContractEvent<
      RemovedEvent.InputTuple,
      RemovedEvent.OutputTuple,
      RemovedEvent.OutputObject
    >;
  };
}
