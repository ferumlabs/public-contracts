/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export interface BlackwingVaultInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ASSET_DEPLOYMENT_ERR"
      | "ASSET_REMOVAL_ERR"
      | "DEFAULT_ADMIN_ROLE"
      | "INITIAL_LIQUIDITY_MULTIPLIER"
      | "MIN_BLOCKS_SINCE_LAST_DEPOSIT_ERR"
      | "OWNER_ROLE"
      | "REGISTERED_ASSET_ERR"
      | "UNAUTHORIZED_ERR"
      | "UNREGISTERED_ASSET_ERR"
      | "VAULT_TOKEN_GRANULARITY_ERR"
      | "WITHDRAWS_DISABLED_ERR"
      | "balance"
      | "deployAssets"
      | "deposit"
      | "disableLPTransfers"
      | "disableWithdrawals"
      | "enableLPTransfers"
      | "enableWithdrawals"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "lastDepositBlock"
      | "registerAsset"
      | "removeAssets"
      | "renounceRole"
      | "revokeRole"
      | "setMinBlocksSinceLastDeposit"
      | "supportsInterface"
      | "updateDeployer"
      | "vaultTokenAddress"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BalanceChange"
      | "Initialized"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ASSET_DEPLOYMENT_ERR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ASSET_REMOVAL_ERR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INITIAL_LIQUIDITY_MULTIPLIER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_BLOCKS_SINCE_LAST_DEPOSIT_ERR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OWNER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REGISTERED_ASSET_ERR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UNAUTHORIZED_ERR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UNREGISTERED_ASSET_ERR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VAULT_TOKEN_GRANULARITY_ERR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WITHDRAWS_DISABLED_ERR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deployAssets",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "disableLPTransfers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "disableWithdrawals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enableLPTransfers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "enableWithdrawals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lastDepositBlock",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerAsset",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAssets",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinBlocksSinceLastDeposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDeployer",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultTokenAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "ASSET_DEPLOYMENT_ERR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ASSET_REMOVAL_ERR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INITIAL_LIQUIDITY_MULTIPLIER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_BLOCKS_SINCE_LAST_DEPOSIT_ERR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "OWNER_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "REGISTERED_ASSET_ERR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UNAUTHORIZED_ERR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UNREGISTERED_ASSET_ERR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VAULT_TOKEN_GRANULARITY_ERR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WITHDRAWS_DISABLED_ERR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deployAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "disableLPTransfers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableWithdrawals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableLPTransfers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableWithdrawals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastDepositBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMinBlocksSinceLastDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDeployer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vaultTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace BalanceChangeEvent {
  export type InputTuple = [
    isDeposit: boolean,
    asset: AddressLike,
    user: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    isDeposit: boolean,
    asset: string,
    user: string,
    amount: bigint
  ];
  export interface OutputObject {
    isDeposit: boolean;
    asset: string;
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BlackwingVault extends BaseContract {
  connect(runner?: ContractRunner | null): BlackwingVault;
  waitForDeployment(): Promise<this>;

  interface: BlackwingVaultInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ASSET_DEPLOYMENT_ERR: TypedContractMethod<[], [string], "view">;

  ASSET_REMOVAL_ERR: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  INITIAL_LIQUIDITY_MULTIPLIER: TypedContractMethod<[], [bigint], "view">;

  MIN_BLOCKS_SINCE_LAST_DEPOSIT_ERR: TypedContractMethod<[], [string], "view">;

  OWNER_ROLE: TypedContractMethod<[], [string], "view">;

  REGISTERED_ASSET_ERR: TypedContractMethod<[], [string], "view">;

  UNAUTHORIZED_ERR: TypedContractMethod<[], [string], "view">;

  UNREGISTERED_ASSET_ERR: TypedContractMethod<[], [string], "view">;

  VAULT_TOKEN_GRANULARITY_ERR: TypedContractMethod<[], [string], "view">;

  WITHDRAWS_DISABLED_ERR: TypedContractMethod<[], [string], "view">;

  balance: TypedContractMethod<
    [asset: AddressLike, user: AddressLike],
    [bigint],
    "view"
  >;

  deployAssets: TypedContractMethod<
    [asset: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  deposit: TypedContractMethod<
    [asset: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  disableLPTransfers: TypedContractMethod<
    [asset: AddressLike],
    [void],
    "nonpayable"
  >;

  disableWithdrawals: TypedContractMethod<[], [void], "nonpayable">;

  enableLPTransfers: TypedContractMethod<
    [asset: AddressLike],
    [void],
    "nonpayable"
  >;

  enableWithdrawals: TypedContractMethod<[], [void], "nonpayable">;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  initialize: TypedContractMethod<
    [_minBlocksSinceLastDeposit: BigNumberish],
    [void],
    "nonpayable"
  >;

  lastDepositBlock: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  registerAsset: TypedContractMethod<
    [asset: AddressLike, vaultToken: AddressLike, deployer: AddressLike],
    [void],
    "nonpayable"
  >;

  removeAssets: TypedContractMethod<
    [asset: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  setMinBlocksSinceLastDeposit: TypedContractMethod<
    [_minBlocksSinceLastDeposit: BigNumberish],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  updateDeployer: TypedContractMethod<
    [asset: AddressLike, deployer: AddressLike],
    [void],
    "nonpayable"
  >;

  vaultTokenAddress: TypedContractMethod<
    [asset: AddressLike],
    [string],
    "view"
  >;

  withdraw: TypedContractMethod<
    [asset: AddressLike, vaultTokensToBurn: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ASSET_DEPLOYMENT_ERR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ASSET_REMOVAL_ERR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "INITIAL_LIQUIDITY_MULTIPLIER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_BLOCKS_SINCE_LAST_DEPOSIT_ERR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "OWNER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "REGISTERED_ASSET_ERR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "UNAUTHORIZED_ERR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "UNREGISTERED_ASSET_ERR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "VAULT_TOKEN_GRANULARITY_ERR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "WITHDRAWS_DISABLED_ERR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "balance"
  ): TypedContractMethod<
    [asset: AddressLike, user: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "deployAssets"
  ): TypedContractMethod<
    [asset: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<
    [asset: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "disableLPTransfers"
  ): TypedContractMethod<[asset: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "disableWithdrawals"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "enableLPTransfers"
  ): TypedContractMethod<[asset: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "enableWithdrawals"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [_minBlocksSinceLastDeposit: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "lastDepositBlock"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "registerAsset"
  ): TypedContractMethod<
    [asset: AddressLike, vaultToken: AddressLike, deployer: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeAssets"
  ): TypedContractMethod<
    [asset: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMinBlocksSinceLastDeposit"
  ): TypedContractMethod<
    [_minBlocksSinceLastDeposit: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "updateDeployer"
  ): TypedContractMethod<
    [asset: AddressLike, deployer: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "vaultTokenAddress"
  ): TypedContractMethod<[asset: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [asset: AddressLike, vaultTokensToBurn: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "BalanceChange"
  ): TypedContractEvent<
    BalanceChangeEvent.InputTuple,
    BalanceChangeEvent.OutputTuple,
    BalanceChangeEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;

  filters: {
    "BalanceChange(bool,address,address,uint256)": TypedContractEvent<
      BalanceChangeEvent.InputTuple,
      BalanceChangeEvent.OutputTuple,
      BalanceChangeEvent.OutputObject
    >;
    BalanceChange: TypedContractEvent<
      BalanceChangeEvent.InputTuple,
      BalanceChangeEvent.OutputTuple,
      BalanceChangeEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
  };
}
