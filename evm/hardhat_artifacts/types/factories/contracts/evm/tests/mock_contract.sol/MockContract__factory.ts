/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../../common";
import type {
  MockContract,
  MockContractInterface,
} from "../../../../../contracts/evm/tests/mock_contract.sol/MockContract";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "contract MockCoin",
        name: "tokenA",
        type: "address",
      },
      {
        internalType: "int256",
        name: "tokenAAmt",
        type: "int256",
      },
      {
        internalType: "contract MockCoin",
        name: "tokenB",
        type: "address",
      },
      {
        internalType: "int256",
        name: "tokenBAmt",
        type: "int256",
      },
    ],
    name: "adj",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "fail",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "success",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061052a806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80630b93381b14610046578063a9cc471814610050578063ac2720f91461005a575b600080fd5b61004e610076565b005b610058610078565b005b610074600480360381019061006f9190610348565b6100b3565b005b565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100aa9061040c565b60405180910390fd5b6000831215610137578373ffffffffffffffffffffffffffffffffffffffff16639dc29fac33856100e39061045b565b6040518363ffffffff1660e01b81526004016101009291906104cb565b600060405180830381600087803b15801561011a57600080fd5b505af115801561012e573d6000803e3d6000fd5b505050506101a5565b8373ffffffffffffffffffffffffffffffffffffffff166340c10f1933856040518363ffffffff1660e01b81526004016101729291906104cb565b600060405180830381600087803b15801561018c57600080fd5b505af11580156101a0573d6000803e3d6000fd5b505050505b6000811215610229578173ffffffffffffffffffffffffffffffffffffffff16639dc29fac33836101d59061045b565b6040518363ffffffff1660e01b81526004016101f29291906104cb565b600060405180830381600087803b15801561020c57600080fd5b505af1158015610220573d6000803e3d6000fd5b50505050610297565b8173ffffffffffffffffffffffffffffffffffffffff166340c10f1933836040518363ffffffff1660e01b81526004016102649291906104cb565b600060405180830381600087803b15801561027e57600080fd5b505af1158015610292573d6000803e3d6000fd5b505050505b50505050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006102cd826102a2565b9050919050565b60006102df826102c2565b9050919050565b6102ef816102d4565b81146102fa57600080fd5b50565b60008135905061030c816102e6565b92915050565b6000819050919050565b61032581610312565b811461033057600080fd5b50565b6000813590506103428161031c565b92915050565b600080600080608085870312156103625761036161029d565b5b6000610370878288016102fd565b945050602061038187828801610333565b9350506040610392878288016102fd565b92505060606103a387828801610333565b91505092959194509250565b600082825260208201905092915050565b7f6661696c00000000000000000000000000000000000000000000000000000000600082015250565b60006103f66004836103af565b9150610401826103c0565b602082019050919050565b60006020820190508181036000830152610425816103e9565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061046682610312565b91507f800000000000000000000000000000000000000000000000000000000000000082036104985761049761042c565b5b816000039050919050565b6104ac816102c2565b82525050565b6000819050919050565b6104c5816104b2565b82525050565b60006040820190506104e060008301856104a3565b6104ed60208301846104bc565b939250505056fea2646970667358221220e97cdcdd2b735f0708ac049677fbb78a4fb02e00d265073fc7d8b9411460435364736f6c63430008170033";

type MockContractConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockContractConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockContract__factory extends ContractFactory {
  constructor(...args: MockContractConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      MockContract & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MockContract__factory {
    return super.connect(runner) as MockContract__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockContractInterface {
    return new Interface(_abi) as MockContractInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MockContract {
    return new Contract(address, _abi, runner) as unknown as MockContract;
  }
}
